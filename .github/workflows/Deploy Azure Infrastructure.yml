name: Deploy Azure Infrastructure

on:
  workflow_dispatch:

env:
  RESOURCE_GROUP: acmetickets_rg
  CONTAINERAPPS_ENVIRONMENT: acmeticketsacadev
  AZURE_LOCATION: eastus
  SERVICEBUS_NAMESPACE: acmeticketsasb

jobs:
  deploy-container-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure Container Apps Environment
        run: |
          az containerapp env create \
            --name "$CONTAINERAPPS_ENVIRONMENT" \
            --resource-group "$RESOURCE_GROUP" \
            --location "$AZURE_LOCATION"
          echo "Azure Container Apps Environment provisioned."

      - name: Create Azure Service Bus Namespace
        run: |
          az servicebus namespace create \
            --name "$SERVICEBUS_NAMESPACE" \
            --resource-group "$RESOURCE_GROUP" \
            --location "$AZURE_LOCATION" \
            --sku Standard
          echo "Azure Service Bus Namespace '$SERVICEBUS_NAMESPACE' provisioned."

        # EventManagement API
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint EventManagement.Api
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name EventManagement.Api
          echo "Azure Service Bus Queue 'EventManagement.Api' provisioned."

        # EventManagement Message
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint EventManagement.Message
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name EventManagement.Message
          echo "Azure Service Bus Queue 'EventManagement.Message' provisioned."

      - name: Create Azure Service Bus Topic for TicketRequestedEvent
        run: |
          az servicebus topic create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name AcmeTickets.EventManagement.InternalContracts.Events.TicketRequestedEvent
          echo "Azure Service Bus Topic 'AcmeTickets.EventManagement.InternalContracts.Events.TicketRequestedEvent' provisioned."

      # Platform API
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint Platform.Api
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name Platform.Api
          echo "Azure Service Bus Queue 'Platform.Api' provisioned."

      # Platform Message
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint Platform.Message
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name Platform.Message
          echo "Azure Service Bus Queue 'Platform.Message' provisioned."

      # Create Azure CosmosDB instance for EventManagement (lowest paid SKU)
      - name: Create Azure CosmosDB Account for EventManagementDb
        run: |
          az cosmosdb create \
            --name eventmanagementdb \
            --resource-group "$RESOURCE_GROUP" \
            --locations regionName="$AZURE_LOCATION" failoverPriority=0 isZoneRedundant=False \
            --default-consistency-level Session \
            --kind GlobalDocumentDB \
            --tier Standard
          echo "Azure CosmosDB Account 'EventManagementDb' provisioned with Standard tier."

      - name: Create CosmosDB Database and Collection for Events
        run: |
          az cosmosdb sql database create \
            --account-name EventManagementDb \
            --resource-group "$RESOURCE_GROUP" \
            --name EventManagement
          az cosmosdb sql container create \
            --account-name EventManagementDb \
            --resource-group "$RESOURCE_GROUP" \
            --database-name EventManagement \
            --name Events \
            --partition-key-path "/id"
          echo "CosmosDB Collection 'Events' created in database 'EventManagement'."


