name: Deploy Azure Infrastructure

on:
  workflow_dispatch:

permissions:
    contents: read
    id-token: write # Required to fetch an OIDC token for Azure login.
    actions: write # Required to use the Azure login action.

env:
  RESOURCE_GROUP: acmetickets_rg
  CONTAINERAPPS_ENVIRONMENT: acmeticketsacadev
  AZURE_LOCATION: eastus2
  SERVICEBUS_NAMESPACE: acmeticketsasb

jobs:
  deploy-container-app:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
   
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group if not exists
        run: |
          az group create \
            --name "$RESOURCE_GROUP" \
            --location "$AZURE_LOCATION"
          echo "Resource group '$RESOURCE_GROUP' ensured."

      - name: Create Azure Container Apps Environment
        run: |
          az containerapp env create \
            --name "$CONTAINERAPPS_ENVIRONMENT" \
            --resource-group "$RESOURCE_GROUP" \
            --location "$AZURE_LOCATION"
          echo "Azure Container Apps Environment provisioned."

      - name: Create Azure Service Bus Namespace
        run: |
          az servicebus namespace create \
            --name "$SERVICEBUS_NAMESPACE" \
            --resource-group "$RESOURCE_GROUP" \
            --location "$AZURE_LOCATION" \
            --sku Standard
          echo "Azure Service Bus Namespace '$SERVICEBUS_NAMESPACE' provisioned."

        # EventManagement API
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint EventManagement.Api
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name EventManagement.Api
          echo "Azure Service Bus Queue 'EventManagement.Api' provisioned."

        # EventManagement Message
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint EventManagement.Message
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name EventManagement.Message
          echo "Azure Service Bus Queue 'EventManagement.Message' provisioned."

      - name: Create Azure Service Bus Topic for TicketRequestedEvent
        run: |
          az servicebus topic create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name AcmeTickets.EventManagement.InternalContracts.Events.TicketRequestedEvent
          echo "Azure Service Bus Topic 'AcmeTickets.EventManagement.InternalContracts.Events.TicketRequestedEvent' provisioned."

      # Platform API
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint Platform.Api
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name Platform.Api
          echo "Azure Service Bus Queue 'Platform.Api' provisioned."

      # Platform Message
      - name: Create Azure Service Bus Queue for NServiceBus Endpoint Platform.Message
        run: |
          az servicebus queue create \
            --resource-group "$RESOURCE_GROUP" \
            --namespace-name "$SERVICEBUS_NAMESPACE" \
            --name Platform.Message
          echo "Azure Service Bus Queue 'Platform.Message' provisioned."

      # Create Azure CosmosDB instance for EventManagement (lowest paid tier)
      - name: Create Azure CosmosDB Account for EventManagementDb
        run: |
          az cosmosdb create \
            --name eventmanagementdb \
            --resource-group "$RESOURCE_GROUP" \
            --locations regionName="$AZURE_LOCATION" failoverPriority=0 isZoneRedundant=False \
            --default-consistency-level Session \
            --kind GlobalDocumentDB
          echo "Azure CosmosDB Account 'EventManagementDb' provisioned with default (lowest) tier."

      - name: Wait for CosmosDB Account EventManagementDb to be available
        run: |
          for i in {1..20}; do
            az cosmosdb show --name eventmanagementdb --resource-group "$RESOURCE_GROUP" && break
            echo "Waiting for CosmosDB account 'eventmanagementdb' to be ready... ($i/20)"
            sleep 15
          done
          echo "CosmosDB account 'eventmanagementdb' is now available."

      - name: Create CosmosDB Database for Events
        run: |
          az cosmosdb sql database create \
            --account-name EventManagementDb \
            --resource-group "$RESOURCE_GROUP" \
            --name EventManagement
          echo "CosmosDB Database 'EventManagement' created."

      - name: Wait for CosmosDB Database EventManagement to be available
        run: |
          for i in {1..20}; do
            az cosmosdb sql database show --account-name EventManagementDb --resource-group "$RESOURCE_GROUP" --name EventManagement && break
            echo "Waiting for CosmosDB database 'EventManagement' to be ready... ($i/20)"
            sleep 10
          done
          echo "CosmosDB database 'EventManagement' is now available."

      - name: Create CosmosDB Collection for Events
        run: |
          az cosmosdb sql container create \
            --account-name EventManagementDb \
            --resource-group "$RESOURCE_GROUP" \
            --database-name EventManagement \
            --name Events \
            --partition-key-path "/id"
          echo "CosmosDB Collection 'Events' created in database 'EventManagement'."


